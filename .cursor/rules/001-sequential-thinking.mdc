---
description: 
globs: 
alwaysApply: true
---
# 001-sequential-thinking.mdc
---
description: "Sequential Thinking for Code Analysis and Problem Solving"
globs: "**/*"
tags: [debugging, analysis, reasoning, problem-solving]
priority: 1
version: 3.0.0
---

## Core Parameters
- `maxDepth: 12` - Maximum number of sequential thoughts in a chain
- `parallelTasks: true` - Enables parallel processing of thoughts when possible
- `contextWindow: 163840` - Maximum context window size for processing thoughts
- `branchingEnabled: true` - Allows thought processes to branch into different paths
- `revisionEnabled: true` - Enables revision of previous thoughts
- `confidenceThreshold: 0.85` - Minimum confidence level for thought acceptance

## Enhancement Features
- `enableSummarization: true` - Automatically summarizes complex thought chains
- `thoughtCategorization: true` - Categorizes thoughts by type and relevance
- `progressTracking: true` - Tracks progress through thought chains
- `dynamicAdaptation: true` - Adapts thinking strategy based on context

## How Sequential Thinking Works

1. **Thought Initialization**
   - System analyzes the problem scope
   - Determines initial number of required thoughts
   - Sets up thinking parameters

2. **Thought Processing**
   - Each thought builds on previous ones
   - Thoughts can branch into sub-thoughts
   - Parallel processing when possible
   - Dynamic adaptation based on context

3. **Revision and Refinement**
   - Thoughts can be revised based on new information
   - Confidence threshold ensures quality
   - Summarization helps maintain clarity

## Code Analysis Flow
1. Problem Identification:
   - Parse error messages and stack traces
   - Identify affected code regions
   - Map dependencies
   - Track error patterns
   - Log occurrence frequency

2. Sequential Analysis:
   - Max depth: 12 steps
   - Break down complex issues
   - Track dependency chains
   - Validate assumptions
   - Generate test cases

3. Solution Generation:
   - Propose multiple fixes
   - Rank by confidence (min 85%)
   - Test against edge cases
   - Validate type safety
   - Check performance impact

4. Implementation:
   - Generate type-safe code
   - Add error handling
   - Include tests
   - Update documentation
   - Track changes

## Debugging Protocol
1. Error Capture:
   - Stack trace analysis
   - Context gathering
   - State inspection
   - Log correlation
   - Performance metrics

2. Root Cause Analysis:
   - Deep trace inspection
   - Pattern recognition
   - Dependency checking
   - State validation
   - Resource monitoring

3. Fix Validation:
   - Unit test generation
   - Integration testing
   - Performance verification
   - Security validation
   - Regression checking

## Example Usage

```javascript
// Sequential thinking example
{
  thoughtNumber: 1,
  thought: "Initial problem analysis",
  nextThoughtNeeded: true,
  branchingEnabled: true
}

// With branching
{
  thoughtNumber: 2,
  thought: "Exploring solution path A",
  branchId: "A",
  nextThoughtNeeded: true
}
```

/// Comments: This file integrates Sequential Thinking concepts from both the existing implementation and guide.mdc. Adjust parameters as needed for specific use cases.