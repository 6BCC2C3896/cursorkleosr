# PROJECT-WIDE DIRECTIVES
1. All .mdc rules in .cursor/rules take precedence and are always enforced
2. Default to TypeScript with strict type checking
3. Use modern frontend best practices and patterns
4. Prefer named exports over default exports
5. Document all @todo comments in JIRA format
6. Follow security-first development practices
7. Implement automated testing for all changes
8. Use context-aware documentation generation
9. Enforce automatic code quality checks
10. Enable real-time validation and monitoring
11. Implement progressive web app standards
12. Ensure cross-browser compatibility

# MCP CONFIGURATION
- Primary servers: Sequential Thinking, OpenRouter
- Fallback strategy: Local context → OpenRouter → Sequential Thinking
- Context window: 163840 tokens (DeepSeek optimized)
- Concurrent agents: 4 maximum (parallel branches)
- Learning rate: Adaptive based on performance metrics
- Confidence threshold: 85% for high-risk changes
- Default model: deepseek/deepseek-r1-zero:free
- Backup models: google/gemini-2.0-flash-thinking-exp:free, undi95/toppy-m-7b:free
- Enforcement: Always with strict validation
- Monitoring: Real-time with automatic actions

# LEARNING AND ADAPTATION
1. Lessons System:
   - User-specified lessons repository
   - AI-learned improvements
   - Version-specific fixes
   - Common pitfalls and solutions
   - Package compatibility notes
   - Model-specific optimizations
   - Character encoding handling
   - Version-specific adjustments

2. Tool Configuration:
   - Python venv activation required
   - UV package manager preference
   - Fallback to pip when needed
   - Screenshot verification workflow
   - Web scraping capabilities
   - Search engine integration
   - Multi-provider LLM support
   - Git commit message handling

# MDC RULES STRUCTURE
1. File Organization:
   - .mdc extension required
   - YAML frontmatter format
   - Task-specific rules in tasks/
   - General rules in root
   - Automatic rule application
   - Context-aware inclusion
   - Reference system (@file syntax)
   - Rule documentation standards

2. Rule Properties:
   - Description field required
   - Glob pattern matching
   - Always-apply flag support
   - Markdown content format
   - Code example inclusion
   - Architectural decisions
   - Guidelines documentation
   - Workflow specifications

# SEQUENTIAL THINKING PROTOCOL
1. Thought Process:
   - Max depth: 12 steps
   - Enable parallel processing
   - Track confidence scores
   - Allow branching paths
   - Maintain context awareness
   - Enable self-correction
   - Document decision paths
   - Track performance metrics

2. Problem Analysis:
   - Break down complex issues
   - Map dependencies
   - Identify root causes
   - Generate test cases
   - Track error patterns
   - Document assumptions
   - Validate solutions
   - Monitor progress

3. Solution Generation:
   - Propose multiple approaches
   - Rank by confidence (min 85%)
   - Test edge cases
   - Validate type safety
   - Check performance impact
   - Ensure security compliance
   - Document trade-offs
   - Track implementation metrics

# SCRATCHPAD SYSTEM
1. Task Management:
   - Current task tracking
   - Progress monitoring ([X] format)
   - Step completion status
   - Blockers and dependencies
   - Time tracking
   - Resource allocation
   - Risk assessment
   - Quality metrics
   - Task reflection points
   - Milestone tracking

2. Knowledge Base:
   - Lessons learned
   - Best practices
   - Common pitfalls
   - Solution patterns
   - Code snippets
   - Documentation links
   - Reference materials
   - Performance data

3. Evolution Mechanism:
   - Pattern recognition
   - Adaptive learning
   - Knowledge refinement
   - Performance optimization
   - Error prevention
   - Quality improvement
   - Process automation
   - Metric tracking

# TOOL INTEGRATION
1. Development Tools:
   - Code generation
   - Static analysis
   - Type checking
   - Linting
   - Testing
   - Documentation
   - Build automation
   - Deployment

2. AI Integration:
   - Code completion
   - Error detection
   - Pattern recognition
   - Performance analysis
   - Security scanning
   - Documentation generation
   - Test generation
   - Refactoring suggestions

3. External Services:
   - Web scraping
   - Search integration
   - LLM providers
   - Screenshot verification
   - API integration
   - Cloud services
   - Monitoring tools
   - Analytics

# CODE QUALITY STANDARDS
1. Code Style:
   - TypeScript strict mode
   - ESLint configuration
   - Prettier formatting
   - Import ordering
   - Component structure
   - File organization
   - Naming conventions
   - Documentation standards

2. Testing Requirements:
   - Unit test coverage (min 80%)
   - Integration testing
   - E2E testing
   - Performance testing
   - Security testing
   - Accessibility testing
   - Cross-browser testing
   - Mobile responsiveness

3. Documentation:
   - JSDoc comments
   - README files
   - API documentation
   - Component documentation
   - Architecture diagrams
   - Setup guides
   - Troubleshooting guides
   - Change logs

# SECURITY PROTOCOLS
1. Code Security:
   - Dependency scanning
   - Static analysis
   - Dynamic analysis
   - Vulnerability checks
   - Access control
   - Data validation
   - Error handling
   - Logging standards

2. Development Security:
   - Secure coding practices
   - API security
   - Authentication
   - Authorization
   - Data encryption
   - Secret management
   - Audit logging
   - Compliance checks

# PERFORMANCE OPTIMIZATION
1. Frontend Performance:
   - Bundle optimization
   - Code splitting
   - Lazy loading
   - Caching strategies
   - Image optimization
   - CSS optimization
   - JavaScript optimization
   - Resource management

2. Development Performance:
   - Build optimization
   - Development server
   - Hot reloading
   - Cache management
   - IDE integration
   - Tool automation
   - Workflow optimization
   - Resource monitoring

# ERROR HANDLING
1. Runtime Errors:
   - Error boundaries
   - Global error handling
   - Error logging
   - Error reporting
   - Recovery strategies
   - User feedback
   - Debug information
   - Performance impact

2. Development Errors:
   - Compile-time checks
   - Type checking
   - Linting rules
   - Test failures
   - Build errors
   - Deployment issues
   - Integration errors
   - Configuration problems

# VERSION CONTROL
1. Git Workflow:
   - Branch naming
   - Commit messages
   - Pull requests
   - Code review
   - Merge strategy
   - Version tagging
   - Release management
   - Changelog maintenance

2. Continuous Integration:
   - Automated testing
   - Build verification
   - Code quality checks
   - Security scanning
   - Performance testing
   - Documentation updates
   - Deployment automation
   - Monitoring integration

/// Comments: This integrated .cursorrules file combines the best practices from all sources
/// while maintaining consistency with the established MDC framework and enhancing the
/// development workflow with AI-powered tools and processes. 
/// The scratchpad system has been enhanced with progress tracking features. 